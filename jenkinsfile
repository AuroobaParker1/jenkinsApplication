pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                // Checkout your source code from repository
                checkout scm
                
                // Build your application
                script {
                    if (isUnix()) {
                        sh 'docker build -t auroobaparker/jenkins-application:latest .'
                    } else {
                        bat 'docker build -t auroobaparker/jenkins-application:latest .'
                    }
                }
            }
        }
    
        stage('Deploy') {
            steps {
                // Deploy your application to Kubernetes
                script {
                    try {
                        // Set KUBECONFIG environment variable
                        def kubeconfig = findKubeconfig()
                        withEnv(["KUBECONFIG=${kubeconfig}"]) {
                            // Apply deployment and service YAML files
                            bat 'kubectl apply -f kubernetes/deployment.yaml --context minikube'
                            bat 'kubectl apply -f kubernetes/service.yaml --context minikube'
                            
                            // Check rollout status
                            bat 'kubectl rollout status deployment/jenkins-deployment --context minikube'
                        }
                    } catch (err) {
                        // If any error occurs, catch and print the error message
                        echo "Error occurred: ${err}"
                        currentBuild.result = 'FAILED'
                        error "Deployment failed"
                    }
                }
            }
        }
    }
}

def findKubeconfig() {
    // Determine home directory path based on OS
    def homeDir
    if (isUnix()) {
        homeDir = sh(script: 'echo $HOME', returnStdout: true).trim()
    } else {
        homeDir = bat(script: 'echo %USERPROFILE%', returnStdout: true).trim()
    }
    
    // Construct path to kubeconfig
    def kubeconfig = "${homeDir}/.kube/config"
    return kubeconfig
}
